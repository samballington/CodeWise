name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        service: [frontend, backend, indexer, mcp_server]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest
          
    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service }}
        file: ${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  create-release-notes:
    runs-on: ubuntu-latest
    needs: build-release
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate release notes
      run: |
        version="${{ inputs.version }}"
        previous_tag=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        echo "# CodeWise Release $version" > release_notes.md
        echo "" >> release_notes.md
        
        if [[ -n "$previous_tag" ]]; then
          echo "## Changes since $previous_tag" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits since last tag
          git log --oneline "$previous_tag..HEAD" --pretty=format:"- %s" >> release_notes.md
        else
          echo "## Initial Release" >> release_notes.md
          echo "- Complete CodeWise system implementation" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Docker Images" >> release_notes.md
        echo "" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}-frontend:$version\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}-backend:$version\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}-indexer:$version\`" >> release_notes.md
        echo "- \`ghcr.io/${{ github.repository }}-mcp_server:$version\`" >> release_notes.md
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.version }}
        release_name: CodeWise ${{ inputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false